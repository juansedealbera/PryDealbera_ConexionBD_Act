<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIACjEwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFv
        ck5UAc+id5oAABNdSURBVHja7d0LdJTlncfxmdxvhCTkglwSCLcECCQkgYAkwCLIRWoRLV4Bl3KR5chZ
        VxH2tFy6VaRQjFCoUqAKe1YqpxJuakQFBCwg5VawIKWCwhEQhF1td9vaPvs8E6bLQpj3nck7med93+/v
        nN/p6TntzPC+7/+Tmffq8RBCCCGEEEIIIYQQQgghhBBCCIlwUmTTZWNZFIQ4N9Gy/WXnytbKfiL7V1lx
        Xb+WPSC7RnaCbBsWGyH2Tp7sj2U/v2HYzfRvsjtlx/ANgRB7JVv2Z7J/DmHw6+tp2UdkvSxaQvTOWNkv
        LRr8G7vj2rcKQohmiZd9OUyDf30VLsNZ3ITok1TZ9xph+P39i+x3WeyERD6J176ai0au2kk4nsVPSOSi
        dsr9MsQB/spTdzjwqKfuKEEoOwzVN4E7WA2ERCZPBDmwe2QnyRbU81pJsgNkF8peCuI1L8q2ZFUQ0rjp
        KPs/Jof017K9g3jtBNnpnrqTg8y8/gZWByGNm1qTv9N/6Kk7EzCUtJE9bBKBu1glhDROKk0O/zgL3ktd
        L7DNxPsd8HCiECGNks0mBvJpC9+vqexvTLznnawaQsIbtcPtG4NB3BaGv8ZFHuMjBb9g9RAS3kzzGB+a
        ax+m915g8N7/7ak7mkAICVO2GAzh2jC+922yfzJ4/8GsImKHdJZ9yFN3jfzzsi9pULVn/5jsCdndsutk
        X7uhRgN4WfazMNbo/Y/V85nVYcJDsh976nYWrtVkeT8n+y+yQ2XTGAnnp52n7kSXs57GP3WW6l21X0Wd
        Uv2op+7CKuKg5HjqrpT7hg2dmqj6AzHOw2FNR+SOa1+L2bBpsH3DU3cIlNg0Uz11e8XZmGmo/a1sB0bJ
        fvlnNl5qUdXVkq0ZKftkMH/5qcU9KJvMaOmfXNmrbLA0DF3FeOkf0zfIaJoYJ0rzssQdha3EiG5tIlaj
        z5l558Mia8gj/68ZlXeL1JJ+IrW4KuJtWjZQZA564KbPmFJYHvDflZ4UH7FlPqwoT/Tr2EJ0yG4qYqKi
        zAKgnqVQwojpm2JP3VVwAVdkmhz8+0rbidkjysUcDWr0eXOnzBd5UxfarhmV3w7472qVnqLF8p9+Z4no
        1TZHeL2mEKhlzPTNSqMV2DojxbfC52gy/ACgz3p4oLyDiI029W2gB6OmX9TZW/8VaMVlJMeLp4foNfwA
        oNe6GNUj3wwACxk3/dLPaMU9XNFRuw0OAPRbHx1z0ozWyWHGTb88GWilNU9N0nJjAwD91sejtxeY2RnI
        Zc+aZXmglVbVoYWpla92DKqfCY1ZtwLQIi25UZfzvw4rNbUNzLqrTCTFxRitlyJGTq+sC7TCRpbkB1zp
        U/p3FW0zU0WU16vd8WenAhCJqsGuyM8xxKClxMngtfozcnol4H3yHuzZIeDwm9z7CwA2B8Df9llNAx4G
        VucHGLzGMEbOIQDkNWui9RloABCeqnNBGrAjkAekOgGA7w8vM3sCCAA4DAB1FigAuBwAMzvhAMCZABS1
        zAAAANAfgNYTn7ElAGkVQwGAAEBDm3P3RFsCkJjbCQCIvQHwer0iLS0trI0yuBotPidX5D72nK2GP/tb
        E+RnD3xINTExMazLNSkpCQAAoGEAqA3p6tWrYe3QocZfleNbtBW33f+E9oOfO+lZkVE1UnhjYg3/TceP
        Hw/rcl2xYgUAAID+AGzevNn019aohCQRk9pMzzZJE97oaFP/juzs7LAvVwAAAFsAoNqyZUtX3V1n/vz5
        AEAAwN/169e7Zvgb468/AACArQBQfeihhxw//NHyJ8Lu3bsBgABAfS0tLXXs8KsjKsuXL2+0ZQkAAGA7
        AFRHjRrluOGPjY0Va9eubdTlCAAAYEsAVFeuXOl7bycMf3l5uTh58mSjL0MAAADbAuDvCy+8IIqKikRc
        XJythj49Pd13fsO+ffsituwAAABsD8D1vXjxoti1a5fvvAEd+9Zbb4mjR4+KS5cuabG8AAAAHAUABQAC
        ABQACABQACAAQAGAAAAFAAAAAAoAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwFYAqCvpPvnk
        E4YaAIibADh06JDo06dP3c1Ao6JEWVmZ2LZtG8MNAMTpAOzdu9d377wbP4+6LHjr1q0MOAAQpwJwq+H3
        t7CwkAEHAKIzAB988IF48sknxciRI8XcuXPFmTNnLBl+f48cOcKQAwDREYCFCxf67oF3/eu0atVK7Nmz
        x5LhV43knXYAAAAA4BZVv8+jb/F0nKysrFsiEMzw5+fniy+//PKWn+HKlSvilVdeEffcc4/o37+/rTtg
        wAAxceJE3/IBAKI9AOPGjTN8KMaNCAQz/AkJCb5bbwX6DJMnT3bcXYXVv3vLli0AQPQGoKqqytSTcfwI
        BDv86glCgd7/3Xff9d1/3+PA5wp07Ngx4DcfAACAiAPw2GOPmX481po1a0wPv3qU9oYNGwzff8aMGY5+
        stCBAwcAgOgLgNo7n5KSYulGr55zr+66a+b9nfj1//q+8847AED0PgqgfqMnJydb9tt306ZNpt97yZIl
        jh1+dRLUZ599BgBE//MArEBAbfDBPk7r/PnzIi8vz5EATJ06lZ2AxB4AqG7cuNH3FzyUjT0mJsa3jyDU
        Mwl79OjhqOcKjh8/Xly4cAEAiH0AUH399ddFfHx8UBu8uvDHiqfoHj582LfvoKamxrZ9++23xaeffsqJ
        QMSeAKiuXr3a9xfdzPCrk4hefPFFzuTjTEDiFAD8G6MRAuqr7qpVqxheACBOA0D11Vdf9R3Pr+99UlNT
        fT8XGFwAIA4FQHXnzp2+c/mvf4+uXbsaXihEAYA4AABVtTd7wYIFvusGFi1apM3jtAEAAACAm4ICAAAA
        AAAAAAAAAAAAAAAAAMMEAAAAABQAAAAAKAAAAABQACAAEN6qKwrVTT5U161bx2ADAHEDAOrOvo8//vhN
        n2fEiBFBXxYLAAAAADYCQA1/oFt7TZkyhQEHAKI7AOo69u3bt4tz585ZNvyea7cJU3f+YcgBgGgIgHqU
        t3ooh//yX3UF4KxZs3zD3dDh91ddVMSQAwDRDAD1+7xbt271vtaECRNuiUAww69gUcgYfRZ1haGd7wak
        +sYbb4gTJ04AALEHAPPmzQv4evUhEMzwq6pHZQX6DLt27RIFBQWOuSegukXa/fffH/TPHgAAgEYHYODA
        gYYb9PUIBDv8gwcPFhcvXgx4V+DWrVs78q7AkyZNAgCiNwDqgZZmNmY/AmqjNjsAQ4YMMTwEWF1d7djn
        AqifPmYfsw4AABARANQNPsxu0J07dzb9vx02bFjAv/xueTKQevoyABBtAbh8+bJvWK3c6IcPHy6++OIL
        U+8/c+ZMRwNw8OBBACB6HwZUf6nV0FqxwQ8YMCCoM//ef/99304zJw6/+sbE04GJ9gD4EWjoN4HKysqQ
        TviZNm2a44ZfPSC1traWnYDEHgD4EVB77UPZ4MvLy8XZs2dDfm914dCDDz7o2ylp56rlp66JUE854jwA
        YisAVD///HPRp0+foIa/pKQk5MdhUQAAAM0uBlJ/ydVfdDPD37NnT4YfAIiTAPAjcPvttwd8L/WVtyFf
        +ykAAIDGlwOrHXqjR4+u933Gjh1r+lAfBQBiQwD8XbZsmWjevLnv9Vu2bOl7ejADCwDEJQD4Txg6ffq0
        7z8ZVgAgLgOAAgABAAoABAAoABAAoABAAIACAAEACgAEACgAEACgAEAAgAIAAQAKAAQAKAAQAKAAQACA
        AgAAAAAFAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAMAwAQAAAAAFAAAAAAoAAAAAFAAIADSgFy5cEFu2bBFLly4V1dXV2ld9ztdee00c
        O3Ys4sP90UcfibVr14olS5aIOXPm1NtRo0YFXLdN4mNF++ym9TY5LsYIgJ/LPh2BTpO9V/Y2Rt6mAJw/
        f17MnDlTpKenG21k2rZ79+5i8eLFjfp4c/Vey5YtE8XFxcLr9dp22VnUb2RXy7Zn9G0EwKlTp0RJSYlj
        NsTCwkKxb9++sA///v37RZcuXdw+9PX1qmwl428DAC5duiQqKioctxGqZaR+yoRr+NVrq/dg2G/ZP8qW
        AIDmACxatMixG2FiYqLYuHGj5cO/adMm32sz5IbdCwCaA1BQUODojdBqBBj+oFsBAJoCcPz4cVdshFYh
        wPCH1O8BgKYAbN261TUbYkMRYPhD7k8AQFMAduzYYbgCo6O8YszA5uK7Q1po2W9VZIoob3gRCGb41We5
        u3emeOreXMe3tEMTM8tkPgBoCsC5c+dEbGys4UocWt5MfF1TJf6ypb+WrX2mu8hoEhsWBIIZfvUZ1GfR
        dTlZ2XXf6ypiY0yd9zAVADTeCTho0CBTG7fuCBxcWi5y0uIsRSCY4VfvrT4Dw3/TiUFtAEBjAGpra02f
        waY7Ah8t7ylaZ8VbgkAww6/e89hLPRn+m7uaw4A2OBNw+vTppnfq6I7AyVUVIjcroUEIBDv86j0Z/pt6
        SrYZANgAgCtXrojJkyebRmBwjwzx1Xp9ETj+s16iRYa5bwIJCQmipqbm78vizTffFMnJyab+v9nya/9R
        l/zl3zCnSMTHRpndRs7ItuNEYBtdDOQ0BNRXcrP7BPwIBDP8ackx4sPFZQz/zT0tm8/o2wyAUBAYUpah
        9c+B/UvKRDOTRwfi4+N9NfO/Va+5b3EpX/vr/9qfy9jbFIBQEKgqShN7qnuID5eUatl/n14omiRGW3Zi
        S1xMlJgxOle89Hgnx/eJka1FdLTp4f+9bGtG3uYAhIIAdX3P8rXfQQCAAA2i52U7MeoOAwAEqIleki1i
        zB0KAAjQAL0sW8qIOxwAEKD19KJsMePtEgD8CPTq1YuNn/5NtjOj7TIAVGfPns0A0POMtUsBUPe1D/S5
        vF6PiIry2qYMc8iH/AgA3Fx1kwi7nOF2eV1fw43dDWf63dhTL1cAAAAAAAAAAAAAgOv6u58DAAAAAAAA
        AAAAgPsAUDc3AQAAAAAAAAAAAAAAAAAAAAAAAAAAAADn9+OVvQAAAAAAAAAAAADAdT2xAgAAAABcC4C6
        pToAAAAAAAAAAAAAuK2/BQAAAAAAAAAAAAAXAqAesAoAAAAAAAAAAAAAbqt6piIAAAAAAAAAAAAAuK1H
        AQAAAAAAAAAAAMCFAPzmRQAAAABwLQBHfloOAAAAAAAAAAAAAK7r4WUAAAAAAAAAAAAA4D4ADgEAAAAA
        AAAAAACACwE4uBQAAAAAAAAAAAAA3AfAgZ+UAQAAAAAAAAAAAIDr+msAAAAAcC8A+5cAAAAAAAAAAAAA
        gPsA+HAxAAAAAAAAAAAAALgPgH2LSwEAAAAAAAAAAADAdd37AgAAAAAAAAAAAAC4D4A91QAAAAAAAAAA
        AADgPgB+9TwAAAAAuBaAD57vAQAAAAAAAAAAAACu6+5FAAAAAAAAAAAAABD4Nf64oZ9YP6tIPPeP7cSz
        j+YH3aX/1FGcerlCq+Wy68cAAAAAYAjAmTW9Rdc2yYavYdS4mCgfBAAAAABgIwBG9slq8PD7GxPt9d2O
        W4flshMAAAAAAgNw8Rd9LRt+3ZYdAAAAABgAYOKuOUH3vspsLZbL+wtLAAAAAMCt3wAAAAAAwMQ+gFF9
        rd0HcFiTfQA7FgAAAACAqaMA3dqmWHIUYNlUfY4CbP8RAGgPQEpKiqipqWn0jhkzBgBuOA+gZnaR+MGY
        tr5/ezCdMTrPd/jv9y/31mq5AIANANC1nAlo/24DAAAAAAAAAAAAABcC8N78YgCINABPDQYAOwCg9pir
        MwI7tUoSbZsnBt2enVLFM+PyxVfrqwAAAP6vs+4qBwDNAdg0t5vv8J0Vy21gcbr482Y9lsu7zwFAxAFQ
        TUuMBwBNAfjT5n4i/7ZES5fdf8zoDAAOzKZAC/OB8lsDMLGqs4jyegFAQwBOrqqwfNlNGNpCi+XyDgBY
        mrWBFuaIbm1uCYDqE4O6i/zMVJEcFyOSZLNSEn3/PT8rMlWfAQD6iyM/tf4n2sP/kAMADkx1oIVZ3iY7
        IAC6tX12UwCQ/cOGKpGaFGMpAM9Paq/Fctk6DwCszORAC7NJQqz4/vAyALDhTsAfjW9n2fDn5SSI/3y9
        Uovl8vaz3QHAwnQ1WvlDuuQCgA0BUHvt1a3AsprGhjz40VFecWdphvh4ZS9tlgsAWBuv7OlACzQ2OkpM
        quoCADY9EUgdEVAXBqkhDra6/NW/vrXPAIDVmWu0oamda+P6FAAAZwICgAOTLfsHo41NHfIryc0UU/p3
        BQAAiFjfAoCw5AfB/DZMS4wTbTNTRZcWGVpV7bQ02pmlzmqLZAf3yBD39s0y7N29Mw3Xg5nXcVoru6YZ
        LZffMc7BJ1H2kB1P76X0hm5nnENLnuwFNiBq8/4boxx6+sp+zUZEbdq/ynZhjBuWYqNDg5Rq2pWMr3VH
        BrayQVEb9bBsCqNrbUbLHmPjopr3PdlMxjU8iZK9Q3aF7Bk2NqpRD8o+cm0bJY0UJW0f2aGy99mkD8vO
        kJ0n+5Tsd2z02VXHyv7w2vkaj9jss4ejVbKtGEVCCCGEEEIIIYQQQgghhBBCiIb5XwZYGYUUQM0EAAAA
        AElFTkSuQmCC
</value>
  </data>
</root>